- group: name={{ postgres_replication_user }} state=present system=yes
  become: yes
  tags: [postgres, keys]

- name: create users
  become: yes
  user: name={{ postgres_replication_user }} shell=/bin/bash groups={{ postgres_replication_user }}
  tags: [postgres, keys]

- file: path=/home/{{ postgres_replication_user }}/.ssh owner={{ postgres_replication_user }} state=directory
  become: yes
  tags: [postgres, keys]

- copy: src=files/{{ item }} dest=/home/{{ postgres_replication_user }}/.ssh/{{ item }} owner={{ postgres_replication_user }} mode=0600
  become: yes
  with_items:
    - id_rsa
    - id_rsa.pub
  tags: [postgres, keys]

- name: Add ssh user keys
  become: yes
  authorized_key:
    user: '{{ postgres_replication_user }}'
    key: "{{ lookup('file', 'files/id_rsa.pub') }}"
  tags: [keys, postgres]


- name: pull postgres image
  shell: docker pull postgres:9.4
  become: yes
  tags: [postgres]

- name: init db on master
  shell: docker run -v {{ postgres_data }}:/var/lib/postgresql/data \
            postgres:9.4 chown -R postgres:postgres /run/postgresql
  become: yes
  tags: [postgres]

- name: init db on master
  shell: docker run -v {{ postgres_data }}:/var/lib/postgresql/data \
            postgres:9.4 chown -R postgres /var/lib/postgresql/data
  become: yes
  tags: [postgres, master]

- name: init db on master
  shell: docker run -v {{ postgres_data }}:/var/lib/postgresql/data \
            postgres:9.4 chmod g+s /run/postgresql
  become: yes
  tags: [postgres, master]

- name: init db on master
  shell: docker run -v {{ postgres_data }}:/var/lib/postgresql/data \
            postgres:9.4 /bin/bash -c 'if [ -z "$(ls -A "$PGDATA")" ]; then gosu postgres initdb ; fi'
  become: yes
  tags: [postgres, master]

- name: run postgres on master
  shell: docker stop postgres-init; \
         docker rm postgres-init; \
         docker run -v {{ postgres_data }}:/var/lib/postgresql/data \
                    --name postgres-init \
                    -d \
                    postgres:9.4
  become: yes
  tags: [postgres, master]

- name: create database
  shell: docker exec postgres-init psql -U postgres -c \
         "CREATE DATABASE {{ postgres_database }};" \
         &> /dev/null
  become: yes
  tags: [postgres, master]

- name: create user
  shell: docker exec postgres-init psql -U postgres -c \
         "CREATE ROLE {{postgres_user}}  WITH LOGIN SUPERUSER PASSWORD '{{ postgres_password }}';" \
         &> /dev/null
  become: yes
  tags: [postgres, master]

- name: create replication user
  shell: docker exec postgres-init psql -U postgres -c \
         "CREATE ROLE {{postgres_replication_user}}   WITH REPLICATION LOGIN ENCRYPTED PASSWORD  '{{ postgres_replication_password }}';" \
         &> /dev/null
  become: yes
  tags: [postgres, master]

- name: stop postgres on master
  shell: docker stop postgres-init
  become: yes
  tags: [postgres, master]

- name: change postgresql.conf
  lineinfile: dest={{postgres_data}}/postgresql.conf line="{{item}}"
  become: yes
  with_items:
    - "listen_addresses = '*'"
    - 'wal_level = hot_standby'
    - 'hot_standby = on'
    - 'max_wal_senders = 5'
    - 'max_replication_slots = 5'
  tags: [postgres, master]

- name: change pg_hba.conf
  lineinfile: dest={{postgres_data}}/pg_hba.conf line="{{item}}"
  become: yes
  with_items:
    - 'host    all             all             0.0.0.0/0               md5'
    - 'host    replication     {{ postgres_replication_user }}       0.0.0.0/0               md5'
  tags: [postgres, master]

- template:
   src: postgres.upstart.conf.j2
   dest: /etc/init/postgres.conf
  become: yes
  tags: [upstart, postgres]
